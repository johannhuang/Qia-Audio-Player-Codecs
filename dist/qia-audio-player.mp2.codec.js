class QiaMP2Codec{constructor(){this._kjmp2_initialize_constants()}decode(t){return new Promise(((s,i)=>{if(t&&t.byteLength>0)try{const e=[],r=[],a=new Uint8Array(t),h=this._kjmp2_get_sample_rate(a);if(h){const t=()=>{try{const t=e.reduce(((t,s)=>t+s.length),0),i=new Float32Array(t);let a=0;for(;e.length>0;){const t=e.shift();i.set(t,a),a+=t.length}const o=new Float32Array(t);let _=0;for(;r.length>0;){const t=r.shift();o.set(t,_),_+=t.length}s({sampleRate:h,length:t,numOfchannels:2,arrayBuffers:[i,o]})}catch(t){i(t)}};let o=a;const _=()=>{if(0!==o.length)try{const t=new Array,s=new Array,a=this._kjmp2_decode_first_frame(o,t,s);if(a>0&&t.length===s.length){const i=new Float32Array(t.length),h=new Float32Array(s.length);for(let e=0;e<t.length;e++)i[e]=t[e],h[e]=s[e];e.push(i),r.push(h),o=o.subarray(a),setTimeout((()=>{_()}),0)}else console.error("[qiaMP2Codec.decode] decoding MP2 error - decodedMP2Bytes, mp2Uint8ArrayLeft.length:",a,o.length),i(new Error("Encountered decoding error - decodedMP2Bytes being 0"))}catch(t){i(t)}else t()};setTimeout((()=>{_()}),0)}else i(new Error("Cannot retrieve sample rate of provided array buffer"))}catch(t){i(t)}else i(new Error("Invalid ArrayBuffer - falsy or byte length is 0"))}))}_kjmp2_initialize_constants(){this.STEREO=0,this.JOINT_STEREO=1,this.DUAL_CHANNEL=2,this.MONO=3,this.sample_rates=[44100,48e3,32e3,0],this.bitrates=[32,48,56,64,80,96,112,128,160,192,224,256,320,384],this.scf_value=[33554432,26632170,21137968,16777216,13316085,10568984,8388608,6658043,5284492,4194304,3329021,2642246,2097152,1664511,1321123,1048576,832255,660561,524288,416128,330281,262144,208064,165140,131072,104032,82570,65536,52016,41285,32768,26008,20643,16384,13004,10321,8192,6502,5161,4096,3251,2580,2048,1625,1290,1024,813,645,512,406,323,256,203,161,128,102,81,64,51,40,32,25,20,0],this.D=[0,0,0,0,0,0,0,-1,-1,-1,-1,-2,-2,-3,-3,-4,-4,-5,-6,-6,-7,-8,-9,-10,-12,-13,-15,-16,-18,-20,-23,-25,-28,-30,-34,-37,-40,-44,-48,-52,-57,-62,-67,-72,-78,-84,-90,-96,-103,-110,-116,-124,-131,-138,-146,-153,-160,-168,-175,-182,-189,-195,-201,-207,213,218,222,225,227,228,228,227,224,221,215,208,200,189,177,163,146,127,106,83,57,29,-1,-35,-71,-110,-152,-196,-243,-293,-346,-400,-458,-518,-580,-644,-710,-778,-847,-918,-990,-1063,-1136,-1209,-1282,-1355,-1427,-1497,-1566,-1633,-1697,-1758,-1816,-1869,-1918,-1961,-2e3,-2031,-2056,-2074,-2084,-2086,-2079,-2062,2037,2e3,1952,1893,1822,1739,1644,1535,1414,1280,1131,970,794,605,402,185,-44,-287,-544,-813,-1094,-1387,-1691,-2005,-2329,-2662,-3003,-3350,-3704,-4062,-4424,-4787,-5152,-5516,-5878,-6236,-6588,-6934,-7270,-7596,-7909,-8208,-8490,-8754,-8997,-9218,-9415,-9584,-9726,-9837,-9915,-9958,-9965,-9934,-9862,-9749,-9591,-9388,-9138,-8839,-8491,-8091,-7639,-7133,6574,5959,5288,4561,3776,2935,2037,1082,70,-997,-2121,-3299,-4532,-5817,-7153,-8539,-9974,-11454,-12979,-14547,-16154,-17798,-19477,-21188,-22928,-24693,-26481,-28288,-30111,-31946,-33790,-35639,-37488,-39335,-41175,-43005,-44820,-46616,-48389,-50136,-51852,-53533,-55177,-56777,-58332,-59837,-61288,-62683,-64018,-65289,-66493,-67628,-68691,-69678,-70589,-71419,-72168,-72834,-73414,-73907,-74312,-74629,-74855,-74991,75038,74992,74856,74630,74313,73908,73415,72835,72169,71420,70590,69679,68692,67629,66494,65290,64019,62684,61289,59838,58333,56778,55178,53534,51853,50137,48390,46617,44821,43006,41176,39336,37489,35640,33791,31947,30112,28289,26482,24694,22929,21189,19478,17799,16155,14548,12980,11455,9975,8540,7154,5818,4533,3300,2122,998,-69,-1081,-2036,-2934,-3775,-4560,-5287,-5958,6574,7134,7640,8092,8492,8840,9139,9389,9592,9750,9863,9935,9966,9959,9916,9838,9727,9585,9416,9219,8998,8755,8491,8209,7910,7597,7271,6935,6589,6237,5879,5517,5153,4788,4425,4063,3705,3351,3004,2663,2330,2006,1692,1388,1095,814,545,288,45,-184,-401,-604,-793,-969,-1130,-1279,-1413,-1534,-1643,-1738,-1821,-1892,-1951,-1999,2037,2063,2080,2087,2085,2075,2057,2032,2001,1962,1919,1870,1817,1759,1698,1634,1567,1498,1428,1356,1283,1210,1137,1064,991,919,848,779,711,645,581,519,459,401,347,294,244,197,153,111,72,36,2,-28,-56,-82,-105,-126,-145,-162,-176,-188,-199,-207,-214,-220,-223,-226,-227,-227,-226,-224,-221,-217,213,208,202,196,190,183,176,169,161,154,147,139,132,125,117,111,104,97,91,85,79,73,68,63,58,53,49,45,41,38,35,31,29,26,24,21,19,17,16,14,13,11,10,9,8,7,7,6,5,5,4,4,3,3,2,2,2,2,1,1,1,1,1,1],this.quant_lut_step1=[[0,0,1,1,1,2,2,2,2,2,2,2,2,2],[0,0,0,0,0,0,1,1,1,2,2,2,2,2]],this.quant_lut_step2=[[8,8,12],[91,91,91],[94,91,94]],this.quant_lut_step3=[[68,68,52,52,52,52,52,52,52,52,52,52],[67,67,67,66,66,66,66,66,66,66,66,49,49,49,49,49,49,49,49,49,49,49,49,32,32,32,32,32,32,32]],this.quant_lut_step4=[[0,1,2,17],[0,1,2,3,4,5,6,17],[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,17],[0,1,3,5,6,7,8,9,10,11,12,13,14,15,16,17],[0,1,2,4,5,6,7,8,9,10,11,12,13,14,15,17]];const t=function(t,s,i,e,r){return{nlevels:t,grouping:s,cw_bits:i,Smul:e,Sdiv:r}};this.quantizer_table=[t(3,1,5,32767,65535),t(5,1,7,16383,2),t(7,0,3,10922,3),t(9,1,10,8191,2),t(15,0,4,4681,65535),t(31,0,5,2184,3),t(63,0,6,1057,65535),t(127,0,7,520,9),t(255,0,8,258,127),t(511,0,9,128,2),t(1023,0,10,64,9),t(2047,0,11,32,33),t(4095,0,12,16,137),t(8191,0,13,8,585),t(16383,0,14,4,2731),t(32767,0,15,2,16383),t(65535,0,16,1,65535)],this.N=[];for(let t=0;t<64;t++)this.N.push([]);for(let t=0;t<64;++t)for(let s=0;s<32;++s)this.N[t][s]=Math.floor(256*Math.cos((16+t)*(1+(s<<1))*.0490873852123405));this.bit_window=void 0,this.bits_in_window=void 0,this.frame_pos=void 0,this.allocation=[[],[]],this.scfsi=[[],[]],this.scalefactor=[[],[]];for(let t=0;t<2;t++)for(let s=0;s<32;s++)this.scalefactor[t][s]=[[],[],[]];this.sample=[[],[]];for(let t=0;t<2;t++)for(let s=0;s<32;s++)this.sample[t][s]=[[],[],[]];this.U=[],this.mp2State={V:[[],[]],Voffs:null};for(let t=0;t<2;++t)for(let s=1023;s>=0;--s)this.mp2State.V[t][s]=0;this.mp2State.Voffs=0}_kjmp2_get_sample_rate(t){return t?255!==t[0]||253!==t[1]||t[2]-16>=224?0:this.sample_rates[t[2]>>2&3]:0}_show_bits(t){return this.bit_window>>24-t}_get_bits(t){var s=this._show_bits(t);for(this.bit_window=this.bit_window<<t&16777215,this.bits_in_window-=t;this.bits_in_window<16;)this.bit_window=this.bit_window|this.mp2Uint8Array[this.frame_pos++]<<16-this.bits_in_window,this.bits_in_window+=8;return s}_read_allocation(t,s){var i=this.quant_lut_step3[s][t];return(i=this.quant_lut_step4[15&i][this._get_bits(i>>4)])?this.quantizer_table[i-1]:0}_read_samples(t,s,i){var e,r,a;if(t){if(s=this.scf_value[s],r=t.nlevels,t.grouping)a=this._get_bits(t.cw_bits),i[0]=a%r,a=Math.floor(a/r),i[1]=a%r,i[2]=Math.floor(a/r);else for(e=0;e<3;++e)i[e]=this._get_bits(t.cw_bits);for(r=(r+1>>1)-1,e=0;e<3;++e)a=(a=r-i[e])*t.Smul+Math.floor(a/t.Sdiv),i[e]=a*(s>>12)+(a*(4095&s)+2048>>12)>>12}else i[0]=i[1]=i[2]=0}_kjmp2_decode_first_frame(t,s,i){this.mp2Uint8Array=t;const e=this.mp2State;var r,a,h,o,_,l,n,f,c,p,b,u,d,g,m,w,y;if(!e||!t)return 0;if(255!==t[0]||252!=(254&t[1]))return 0;if(this.bit_window=t[2]<<16,this.bits_in_window=8,this.frame_pos=3,(r=this._get_bits(4)-1)>13)return 0;if(3===(a=this._get_bits(2)))return 0;for(h=this._get_bits(1),this._get_bits(1),(o=this._get_bits(2))===this.JOINT_STEREO?l=this._get_bits(2)+1<<2:(this._get_bits(2),l=o===this.MONO?0:32),this._get_bits(4),0==(1&t[1])&&this._get_bits(16),_=Math.floor(144e3*this.bitrates[r]/this.sample_rates[a])+h,y=o===this.MONO?0:1,y=this.quant_lut_step1[y][r],n=63&(y=this.quant_lut_step2[y][a]),y>>=6,l>n&&(l=n),f=0;f<l;++f)for(c=0;c<2;++c)this.allocation[c][f]=this._read_allocation(f,y);for(f=l;f<n;++f)this.allocation[0][f]=this.allocation[1][f]=this._read_allocation(f,y);for(d=o===this.MONO?1:2,f=0;f<n;++f){for(c=0;c<d;++c)this.allocation[c][f]&&(this.scfsi[c][f]=this._get_bits(2));o===this.MONO&&(this.scfsi[1][f]=this.scfsi[0][f])}for(f=0;f<n;++f){for(c=0;c<d;++c)if(this.allocation[c][f])switch(this.scfsi[c][f]){case 0:this.scalefactor[c][f][0]=this._get_bits(6),this.scalefactor[c][f][1]=this._get_bits(6),this.scalefactor[c][f][2]=this._get_bits(6);break;case 1:this.scalefactor[c][f][0]=this.scalefactor[c][f][1]=this._get_bits(6),this.scalefactor[c][f][2]=this._get_bits(6);break;case 2:this.scalefactor[c][f][0]=this.scalefactor[c][f][1]=this.scalefactor[c][f][2]=this._get_bits(6);break;case 3:this.scalefactor[c][f][0]=this._get_bits(6),this.scalefactor[c][f][1]=this.scalefactor[c][f][2]=this._get_bits(6)}if(o==this.MONO)for(b=0;b<3;++b)this.scalefactor[1][f][b]=this.scalefactor[0][f][b]}for(this.ppcm=0,b=0;b<3;++b)for(p=0;p<4;++p){for(f=0;f<l;++f)for(c=0;c<2;++c)this._read_samples(this.allocation[c][f],this.scalefactor[c][f][b],this.sample[c][f]);for(f=l;f<n;++f)for(this._read_samples(this.allocation[0][f],this.scalefactor[0][f][b],this.sample[0][f]),u=0;u<3;++u)this.sample[1][f][u]=this.sample[0][f][u];for(c=0;c<2;++c)for(f=n;f<32;++f)for(u=0;u<3;++u)this.sample[c][f][u]=0;for(u=0;u<3;++u)for(e.Voffs=y=e.Voffs-64&1023,c=0;c<2;++c){for(g=0;g<64;++g){for(w=0,m=0;m<32;++m)w+=this.N[g][m]*this.sample[c][m][u];e.V[c][y+g]=w+8192>>14}for(g=0;g<8;++g)for(m=0;m<32;++m)this.U[(g<<6)+m]=e.V[c][y+(g<<7)+m&1023],this.U[(g<<6)+m+32]=e.V[c][y+(g<<7)+m+96&1023];for(g=0;g<512;++g)this.U[g]=this.U[g]*this.D[g]+32>>6;for(m=0;m<32;++m){for(w=0,g=0;g<16;++g)w-=this.U[(g<<5)+m];(w=w+8>>4)<-32768&&(w=-32768),w>32767&&(w=32767),0==c&&s.push(w/33e3),1==c&&i.push(w/33e3)}}this.ppcm+=192}return _}}this.QiaMP2Codec=QiaMP2Codec;